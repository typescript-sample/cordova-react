{"version":3,"sources":["logo.svg","services/SqliteMobile/SqliteMobile.ts","sqlite-hook.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DatabaseManager","database","this","exec","bind","execBatch","query","queryOne","execScalar","count","sql","args","statements","firstSuccess","m","fields","db","length","params","Promise","resolve","reject","transaction","txn","executeSql","tx","result","rowsAffected","slice","forEach","item","toArray","err","e","console","log","p","bools","results","handleResults","rows","_array","handleResult","then","r","Object","keys","arr","l","i","undefined","push","res","objs","obj","obj2","key","k0","mapArray","handleBool","field","value","name","b","true","App","sqliteDb","window","sqlitePlugin","openDatabase","useState","users","setUser","sqliteUser","useEffect","initTable","all","insert","user","userId","email","status","alert","catch","deleteUser","id","load","update","insertMany","map","useSqlite","inputUser","setInputUser","deleteId","setDeleteId","inputId","setInputId","handleFetch","className","src","logo","alt","onClick","style","display","placeholder","onChange","target","prev","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","renderReactDom","ReactDOM","render","document","getElementById","cordova","addEventListener"],"mappings":"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","file":"static/js/main.44f580df.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Attribute, Attributes, Manager, Statement, StringMap } from './metadata';\r\nimport { buildToSave, buildToSaveBatch } from './build';\r\n\r\nexport class DatabaseManager implements Manager {\r\n  constructor(public database: any) {\r\n    this.exec = this.exec.bind(this);\r\n    this.execBatch = this.execBatch.bind(this);\r\n    this.query = this.query.bind(this);\r\n    this.queryOne = this.queryOne.bind(this);\r\n    this.execScalar = this.execScalar.bind(this);\r\n    this.count = this.count.bind(this);\r\n  }\r\n  exec(sql: string, args?: any[]): Promise<number> {\r\n    return exec(this.database, sql, args);\r\n  }\r\n  execBatch(statements: Statement[], firstSuccess?: boolean): Promise<number> {\r\n    return execBatch(this.database, statements, firstSuccess);\r\n  }\r\n  query<T>(sql: string, args?: any[], m?: StringMap, fields?: Attribute[]): Promise<T[]> {\r\n    return query(this.database, sql, args, m, fields);\r\n  }\r\n  queryOne<T>(sql: string, args?: any[], m?: StringMap, fields?: Attribute[]): Promise<T> {\r\n    return queryOne(this.database, sql, args, m, fields);\r\n  }\r\n  execScalar<T>(sql: string, args?: any[]): Promise<T> {\r\n    return execScalar<T>(this.database, sql, args);\r\n  }\r\n  count(sql: string, args?: any[]): Promise<number> {\r\n    return count(this.database, sql, args);\r\n  }\r\n}\r\n\r\nexport function execute(db: any, sql: string): Promise<void> {\r\n  if (db.executeSql) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      db.executeSql(sql, [], () => {\r\n        return resolve();\r\n      }, (err: any) => {\r\n        return reject(err);\r\n      });\r\n    });\r\n  } else {\r\n    return new Promise<void>((resolve, reject) => {\r\n      return db.transaction(txn => {\r\n        txn.executeSql(sql, [], () => {\r\n          return resolve();\r\n        });\r\n      }, (err: any) => {\r\n        return reject(err);\r\n      });\r\n    });\r\n  }\r\n}\r\nexport function execBatch(db: any, statements: Statement[], firstSuccess?: boolean): Promise<number> {\r\n  if (!statements || statements.length === 0) {\r\n    return Promise.resolve(0);\r\n  } else if (statements.length === 1) {\r\n    return exec(db, statements[0].query, statements[0].params);\r\n  }\r\n  if (firstSuccess) {\r\n    return new Promise<number>((resolve, reject) => {\r\n      return db.transaction(txn => {\r\n        return txn.executeSql(statements[0].query, statements[0].params, (tx, result) => {\r\n          if (result && result.rowsAffected > 0) {\r\n            let listStatements = statements.slice(1);\r\n            listStatements.forEach(item => {\r\n              txn.executeSql(item.query, toArray(item.params));\r\n            });\r\n          }\r\n        }, (err: any) => {\r\n          return reject(err);\r\n        });\r\n      }, (e: any) => {\r\n        reject(e);\r\n      }, () => {\r\n        resolve(1);\r\n      });\r\n    });\r\n  } else {\r\n    return new Promise<number>((resolve, reject) => {\r\n      return db.transaction(txn => {\r\n        statements.forEach(item => {\r\n          txn.executeSql(item.query, toArray(item.params));\r\n        })\r\n      }, (e: any) => {\r\n        console.log(e);\r\n        reject(e);\r\n      }, () => {\r\n        resolve(1);\r\n      });\r\n    });\r\n  }\r\n}\r\nexport function getTransaction(db: any): Promise<any> {\r\n  return new Promise<number>((resolve, reject) => {\r\n    return db.transaction(txn => {\r\n      return resolve(txn);\r\n    });\r\n  });\r\n}\r\n/**\r\n * \r\n * @param db can be db or transaction\r\n * @param sql \r\n * @param args \r\n */\r\nexport function exec(db: any, sql: string, args?: any[]): Promise<number> {\r\n  const p = toArray(args);\r\n  if (db.executeSql) {\r\n    return new Promise<number>((resolve, reject) => {\r\n      db.executeSql(sql, p, (tx, result) => {\r\n        if (result && result.rowsAffected > 0) {\r\n          return resolve(1);\r\n        } else if (!result) {\r\n          return reject(0);\r\n        }\r\n      });\r\n    });\r\n  } else {\r\n    console.log('db does not have executeSql fuction');\r\n    return new Promise<number>((resolve, reject) => {\r\n      return db.transaction(txn => {\r\n        console.log('trans', txn.executeSql);\r\n        txn.executeSql(sql, p, (tx, result) => {\r\n          if (result && result.rowsAffected > 0) {\r\n            return resolve(1);\r\n          }\r\n        });\r\n      }, (e: any) => {\r\n        console.log(e);\r\n        reject(e);\r\n      }, () => {\r\n        resolve(1);\r\n      });\r\n    });\r\n  }\r\n}\r\nexport function query<T>(db: any, sql: string, args?: any[], m?: StringMap, bools?: Attribute[]): Promise<T[]> {\r\n  const p = args ? args : [];\r\n  console.log(db);\r\n  if (db.executeSql) {\r\n    return new Promise<T[]>((resolve, reject) => {\r\n      db.executeSql(sql, p, (tx, results: any) => {\r\n        return resolve(handleResults<T>(results.rows._array, m, bools));\r\n      });\r\n    });\r\n  } else {\r\n    return new Promise<T[]>((resolve, reject) => {\r\n      return db.transaction(txn => {\r\n        txn.executeSql(sql, p, (tx, results: any) => {\r\n          return resolve(handleResults<T>(results.rows._array, m, bools));\r\n        });\r\n      }, (err: any) => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n}\r\nexport function queryOne<T>(db: any, sql: string, args?: any[], m?: StringMap, bools?: Attribute[]): Promise<T> {\r\n  const p = args ? args : [];\r\n  if (db.executeSql) {\r\n    return new Promise<T>((resolve, reject) => {\r\n      db.executeSql(sql, p, (tx, result: any) => {\r\n        if (result.rows && result.rows._array && result.rows.length > 0) {\r\n          return resolve(handleResult<T>(result.rows._array, m, bools));\r\n        } else {\r\n          return resolve(null);\r\n        }\r\n      });\r\n    });\r\n  } else {\r\n    return new Promise<T>((resolve, reject) => {\r\n      return db.transaction(txn => {\r\n        txn.executeSql(sql, p, (tx, result: any) => {\r\n          console.log({ tx }, { result });\r\n          if (result.rows && result.rows._array && result.rows.length > 0) {\r\n            return resolve(handleResult<T>(result.rows._array, m, bools));\r\n          } else {\r\n            return resolve(null);\r\n          }\r\n        });\r\n      }, (err: any) => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n}\r\nexport function execScalar<T>(db: any, sql: string, args?: any[]): Promise<T> {\r\n  return queryOne<T>(db, sql, args).then(r => {\r\n    if (!r) {\r\n      return null;\r\n    } else {\r\n      const keys = Object.keys(r);\r\n      return r[keys[0]];\r\n    }\r\n  });\r\n}\r\nexport function count(db: any, sql: string, args?: any[]): Promise<number> {\r\n  return execScalar<number>(db, sql, args);\r\n}\r\nexport function save<T>(db: any | ((sql: string, args?: any[]) => Promise<number>), obj: T, table: string, attrs: Attributes, buildParam?: (i: number) => string, i?: number): Promise<number> {\r\n  const stm = buildToSave(obj, table, attrs, buildParam, i);\r\n  if (!stm) {\r\n    return Promise.resolve(0);\r\n  } else {\r\n    if (typeof db === 'function') {\r\n      return db(stm.query, stm.params);\r\n    } else {\r\n      return exec(db, stm.query, stm.params);\r\n    }\r\n  }\r\n}\r\nexport function saveBatch<T>(db: any | ((statements: Statement[]) => Promise<number>), objs: T[], table: string, attrs: Attributes, buildParam?: (i: number) => string): Promise<number> {\r\n  const stmts = buildToSaveBatch(objs, table, attrs, buildParam);\r\n  if (!stmts || stmts.length === 0) {\r\n    return Promise.resolve(0);\r\n  } else {\r\n    if (typeof db === 'function') {\r\n      return db(stmts);\r\n    } else {\r\n      return execBatch(db, stmts);\r\n    }\r\n  }\r\n}\r\nexport function toArray<T>(arr: T[]): T[] {\r\n  if (!arr || arr.length === 0) {\r\n    return [];\r\n  }\r\n  const p: T[] = [];\r\n  const l = arr.length;\r\n  for (let i = 0; i < l; i++) {\r\n    if (arr[i] === undefined) {\r\n      p.push(null);\r\n    } else {\r\n      p.push(arr[i]);\r\n    }\r\n  }\r\n  return p;\r\n}\r\nexport function handleResult<T>(r: T, m?: StringMap, bools?: Attribute[]): T {\r\n  if (r == null || r === undefined || (!m && (!bools || bools.length === 0))) {\r\n    return r;\r\n  }\r\n  handleResults([r], m, bools);\r\n  return r;\r\n}\r\nexport function handleResults<T>(r: T[], m?: StringMap, bools?: Attribute[]): T[] {\r\n  if (m) {\r\n    const res = mapArray(r, m);\r\n    if (bools && bools.length > 0) {\r\n      return handleBool(res, bools);\r\n    } else {\r\n      return res;\r\n    }\r\n  } else {\r\n    if (bools && bools.length > 0) {\r\n      return handleBool(r, bools);\r\n    } else {\r\n      return r;\r\n    }\r\n  }\r\n}\r\nexport function handleBool<T>(objs: T[], bools: Attribute[]): T[] {\r\n  if (!bools || bools.length === 0 || !objs) {\r\n    return objs;\r\n  }\r\n  for (const obj of objs) {\r\n    for (const field of bools) {\r\n      const value = obj[field.name];\r\n      if (value != null && value !== undefined) {\r\n        const b = field.true;\r\n        if (b == null || b === undefined) {\r\n          // tslint:disable-next-line:triple-equals\r\n          obj[field.name] = ('1' == value || 'T' == value || 'Y' == value || 'true' == value);\r\n        } else {\r\n          // tslint:disable-next-line:triple-equals\r\n          obj[field.name] = (value == b ? true : false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return objs;\r\n}\r\nexport function map<T>(obj: T, m?: StringMap): any {\r\n  if (!m) {\r\n    return obj;\r\n  }\r\n  const mkeys = Object.keys(m);\r\n  if (mkeys.length === 0) {\r\n    return obj;\r\n  }\r\n  const obj2: any = {};\r\n  const keys = Object.keys(obj);\r\n  for (const key of keys) {\r\n    let k0 = m[key];\r\n    if (!k0) {\r\n      k0 = key;\r\n    }\r\n    obj2[k0] = obj[key];\r\n  }\r\n  return obj2;\r\n}\r\nexport function mapArray<T>(results: T[], m?: StringMap): T[] {\r\n  if (!m) {\r\n    return results;\r\n  }\r\n  const mkeys = Object.keys(m);\r\n  if (mkeys.length === 0) {\r\n    return results;\r\n  }\r\n  const objs = [];\r\n  const length = results.length;\r\n  for (let i = 0; i < length; i++) {\r\n    const obj = results[i];\r\n    const obj2: any = {};\r\n    const keys = Object.keys(obj);\r\n    for (const key of keys) {\r\n      let k0 = m[key];\r\n      if (!k0) {\r\n        k0 = key;\r\n      }\r\n      obj2[k0] = (obj as any)[key];\r\n    }\r\n    objs.push(obj2);\r\n  }\r\n  return objs;\r\n}\r\nexport function getFields(fields: string[], all?: string[]): string[] {\r\n  if (!fields || fields.length === 0) {\r\n    return undefined;\r\n  }\r\n  const ext: string[] = [];\r\n  if (all) {\r\n    for (const s of fields) {\r\n      if (all.includes(s)) {\r\n        ext.push(s);\r\n      }\r\n    }\r\n    if (ext.length === 0) {\r\n      return undefined;\r\n    } else {\r\n      return ext;\r\n    }\r\n  } else {\r\n    return fields;\r\n  }\r\n}\r\nexport function buildFields(fields: string[], all?: string[]): string {\r\n  const s = getFields(fields, all);\r\n  if (!s || s.length === 0) {\r\n    return '*';\r\n  } else {\r\n    return s.join(',');\r\n  }\r\n}\r\nexport function getMapField(name: string, mp?: StringMap): string {\r\n  if (!mp) {\r\n    return name;\r\n  }\r\n  const x = mp[name];\r\n  if (!x) {\r\n    return name;\r\n  }\r\n  if (typeof x === 'string') {\r\n    return x;\r\n  }\r\n  return name;\r\n}\r\nexport function isEmpty(s: string): boolean {\r\n  return !(s && s.length > 0);\r\n}\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class StringService {\r\n  constructor(protected db: any, public table: string, public column: string) {\r\n    this.load = this.load.bind(this);\r\n    this.save = this.save.bind(this);\r\n  }\r\n  load(key: string, max: number): Promise<string[]> {\r\n    const s = `select ${this.column} from ${this.table} where ${this.column} like ? order by ${this.column} limit ${max}`;\r\n    return query(this.db, s, ['' + key + '%']).then(arr => {\r\n      return arr.map(i => i[this.column] as string);\r\n    });\r\n  }\r\n  save(values: string[]): Promise<number> {\r\n    if (!values || values.length === 0) {\r\n      return Promise.resolve(0);\r\n    }\r\n    const arr: string[] = [];\r\n    for (let i = 1; i <= values.length; i++) {\r\n      arr.push('($' + i + ')');\r\n      i++;\r\n    }\r\n    const s = `insert or ignore into ${this.table}(${this.column})values${arr.join(',')}`;\r\n    return exec(this.db, s, values);\r\n  }\r\n}\r\n\r\nexport function version(attrs: Attributes): Attribute {\r\n  const ks = Object.keys(attrs);\r\n  for (const k of ks) {\r\n    const attr = attrs[k];\r\n    if (attr.version) {\r\n      attr.name = k;\r\n      return attr;\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SqliteWriter<T> {\r\n  db?: any;\r\n  exec?: (sql: string, args?: any[]) => Promise<number>;\r\n  map?: (v: T) => T;\r\n  param?: (i: number) => string;\r\n  constructor(db: any | ((sql: string, args?: any[]) => Promise<number>), public table: string, public attributes: Attributes, toDB?: (v: T) => T, buildParam?: (i: number) => string) {\r\n    this.write = this.write.bind(this);\r\n    if (typeof db === 'function') {\r\n      this.exec = db;\r\n    } else {\r\n      this.db = db;\r\n    }\r\n    this.param = buildParam;\r\n    this.map = toDB;\r\n  }\r\n  write(obj: T): Promise<number> {\r\n    if (!obj) {\r\n      return Promise.resolve(0);\r\n    }\r\n    let obj2 = obj;\r\n    if (this.map) {\r\n      obj2 = this.map(obj);\r\n    }\r\n    const stmt = buildToSave(obj2, this.table, this.attributes, this.param);\r\n    if (stmt) {\r\n      if (this.exec) {\r\n        return this.exec(stmt.query, stmt.params);\r\n      } else {\r\n        return exec(this.db, stmt.query, stmt.params);\r\n      }\r\n    } else {\r\n      return Promise.resolve(0);\r\n    }\r\n  }\r\n}\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SqliteBatchWriter<T> {\r\n  pool?: any;\r\n  version?: string;\r\n  execute?: (statements: Statement[]) => Promise<number>;\r\n  map?: (v: T) => T;\r\n  param?: (i: number) => string;\r\n  constructor(db: any | ((statements: Statement[]) => Promise<number>), public table: string, public attributes: Attributes, toDB?: (v: T) => T, buildParam?: (i: number) => string) {\r\n    this.write = this.write.bind(this);\r\n    if (typeof db === 'function') {\r\n      this.execute = db;\r\n    } else {\r\n      this.pool = db;\r\n    }\r\n    this.param = buildParam;\r\n    this.map = toDB;\r\n    const x = version(attributes);\r\n    if (x) {\r\n      this.version = x.name;\r\n    }\r\n  }\r\n  write(objs: T[]): Promise<number> {\r\n    if (!objs || objs.length === 0) {\r\n      return Promise.resolve(0);\r\n    }\r\n    let list = objs;\r\n    if (this.map) {\r\n      list = [];\r\n      for (const obj of objs) {\r\n        const obj2 = this.map(obj);\r\n        list.push(obj2);\r\n      }\r\n    }\r\n    const stmts = buildToSaveBatch(list, this.table, this.attributes, this.param);\r\n    if (stmts && stmts.length > 0) {\r\n      if (this.execute) {\r\n        return this.execute(stmts);\r\n      } else {\r\n        return execBatch(this.pool, stmts);\r\n      }\r\n    } else {\r\n      return Promise.resolve(0);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface AnyMap {\r\n  [key: string]: any;\r\n}\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SqliteChecker {\r\n  constructor(private db: any, private service?: string, private timeout?: number) {\r\n    if (!this.timeout) {\r\n      this.timeout = 4200;\r\n    }\r\n    if (!this.service) {\r\n      this.service = 'sqlite';\r\n    }\r\n    this.check = this.check.bind(this);\r\n    this.name = this.name.bind(this);\r\n    this.build = this.build.bind(this);\r\n  }\r\n  check(): Promise<AnyMap> {\r\n    const obj = {} as AnyMap;\r\n    const promise = new Promise<any>((resolve, reject) => {\r\n      this.db.get('select date();', (err, result) => {\r\n        if (err) {\r\n          return reject(err);\r\n        } else {\r\n          resolve(obj);\r\n        }\r\n      });\r\n    });\r\n    if (this.timeout > 0) {\r\n      return promiseTimeOut(this.timeout, promise);\r\n    } else {\r\n      return promise;\r\n    }\r\n  }\r\n  name(): string {\r\n    return this.service;\r\n  }\r\n  build(data: AnyMap, err: any): AnyMap {\r\n    if (err) {\r\n      if (!data) {\r\n        data = {} as AnyMap;\r\n      }\r\n      data['error'] = err;\r\n    }\r\n    return data;\r\n  }\r\n}\r\n\r\nfunction promiseTimeOut(timeoutInMilliseconds: number, promise: Promise<any>): Promise<any> {\r\n  return Promise.race([\r\n    promise,\r\n    new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        reject(`Timed out in: ${timeoutInMilliseconds} milliseconds!`);\r\n      }, timeoutInMilliseconds);\r\n    })\r\n  ]);\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport { User } from \"./models/User\";\nimport { Statement } from \"./services/SqliteMobile/metadata\";\nimport { DatabaseManager } from \"./services/SqliteMobile/SqliteMobile\";\n\nexport const useSqlite = () => {\n  // @ts-ignore: Unreachable code error\n  const database = window.sqlitePlugin.openDatabase('database.db', '1.0', 'user database', 1000000);\n  const [users, setUser] = useState<User[]>([]);\n  const sqliteUser = new DatabaseManager(database);\n\n  useEffect(() => {\n    (() => {\n      // deleteTable();\n      initTable();\n    })();\n  }, []);\n\n  const initTable = () => {\n    const string = `CREATE TABLE IF NOT EXISTS users(\n      userId TEXT PRIMARY KEY NOT NULL,\n      name TEXT,\n      email TEXT,\n      status BOOLEAN\n    )`;\n    sqliteUser.exec(string);\n  };\n\n  const deleteTable = () => {\n    const string = `DROP TABLE users`;\n    sqliteUser.exec(string);\n  }\n\n  const all = () => {\n    const string = 'select * from users';\n    return sqliteUser.query<User>(string).then(res => setUser(res));\n  };\n\n  const load = (id: string) => {\n    const string = 'SELECT * FROM users WHERE userId = ?';\n    const args = [id];\n    return sqliteUser.queryOne<User[]>(string, args).then(res => {\n      setUser(res);\n    });\n  };\n\n  const insert = (user: User) => {\n    const string = 'INSERT INTO users (userId, name, email, status) VALUES (?,?,?,?)';\n    const args = [user.userId, user.name, user.email, user.status];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Insert Success!');\n    }).catch(() => alert('Insert Failed!'));\n  };\n\n  const deleteUser = (id: string) => {\n    const string = 'DELETE FROM users WHERE userId = ?';\n    const args = [id];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Delete Success!');\n    }).catch(() => alert('Delete Failed!'));\n  };\n\n  const update = (user: User) => {\n    const string = 'UPDATE users SET name=?,email=?,status=? WHERE userId=?';\n    const args = [user.name, user.email, user.status, user.userId];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Update Success!');\n    }).catch(() => {\n      alert('Update Failed!');\n    });\n  }\n\n  const insertMany = (users: User[]) => {\n    const statements: Statement[] = users.map((item) => {\n      return { query: 'INSERT INTO users (userId, name, email, status) VALUES (?,?,?,?)', params: [item.userId, item.name, item.email, item.status] };\n    });\n    return sqliteUser.execBatch(statements, true).then(() => {\n      alert('Success!');\n    }).catch(() => alert('Rollback!'));\n  }\n\n  return { database, all, insert, users, deleteUser, load, update, insertMany };\n};","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useSqlite } from './sqlite-hook';\nimport { User } from './models/User';\n\nfunction App() {\n  const sqliteDb = useSqlite();\n  const [inputUser, setInputUser] = useState<User>({\n    userId: null,\n    name: '',\n    email: '',\n    status: false\n  });\n  const [deleteId, setDeleteId] = useState<string>('');\n  const [inputId, setInputId] = useState<string>('');\n\n  const handleFetch = () => {\n    sqliteDb.all().then(res => console.log(res));\n  }\n\n  const handleInputUserId = (e: any) => {\n    setInputUser((prev) => ({...prev, userId: e.target.value}));\n  };\n  const handleInputName = (e: any) => {\n    setInputUser((prev) => ({...prev, name: e.target.value}));\n  };\n  const handleInputEmail = (e: any) => {\n    setInputUser((prev) => ({...prev, email: e.target.value}));\n  };\n  const handleInputDelete = (e: any) => {\n    setDeleteId(e.target.value);\n  };\n  const handleInputId = (e: any) => {\n    setInputId(e.target.value);\n  };\n\n  const handleInsert = () => {\n    sqliteDb.insert(inputUser);\n    setInputUser((prev) => ({...prev,userId: null, name: '', email: '', status: false}));\n    handleFetch();\n  }\n\n  const handleDelete = () => {\n    sqliteDb.deleteUser(deleteId);\n    setDeleteId('');\n    handleFetch();\n  }\n\n  const load = () => {\n    sqliteDb.load(inputId);\n    setInputId('');\n  }\n\n  const handleUpdate = () => {\n    sqliteDb.update(inputUser);\n    setInputUser({userId: null, name: '', email: '', status: false});\n    handleFetch();\n  }\n\n  const inserMany = () => {\n    const users: User[] = [\n      {\n        userId: '5',\n        name: '5',\n        email: '5',\n        status: false\n      },\n      {\n        userId: '6',\n        name: '6',\n        email: '6',\n        status: false\n      },\n      {\n        userId: '7',\n        name: '7',\n        email: '7',\n        status: false\n      },\n      {\n        userId: '8',\n        name: '8',\n        email: '8',\n        status: false\n      },\n    ];\n    sqliteDb.insertMany(users);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className='list-user'>\n        {sqliteDb.users ? sqliteDb.users.map(item => (\n          <>\n            <p>User Name: {item.name}</p>\n            <p>Email: {item.email}</p>\n            <hr />\n          </>\n        )) : (\n          <p>\n            Hello World!\n          </p>\n        )}\n          </div>\n        <button onClick={handleFetch}>Fetch</button>\n        <div style={{display: 'contents'}}>\n          <input value={inputId} placeholder='Input Id' onChange={handleInputId}/>\n        </div>\n        <button onClick={load}>Load</button>\n        <div style={{display: 'contents'}}>\n          <input value={inputUser.userId} placeholder='userId' onChange={handleInputUserId}/>\n          <input value={inputUser.name} placeholder='name' onChange={handleInputName}/>\n          <input value={inputUser.email} placeholder='email' onChange={handleInputEmail}/>\n        </div>\n        <div style={{display: 'flex', justifyContent:'space-between'}}>\n          <button onClick={handleInsert}>Insert</button>\n          <button onClick={handleUpdate}>Update</button>\n        </div>\n        <button onClick={inserMany}>Insert Many</button>\n        <div style={{display: 'contents'}}>\n          <input value={deleteId} placeholder='Delete Id' onChange={handleInputDelete}/>\n        </div>\n        <button onClick={handleDelete}>Delete</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst renderReactDom = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n// @ts-ignore: Unreachable code error\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}