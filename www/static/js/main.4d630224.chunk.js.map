{"version":3,"sources":["logo.svg","services/SqliteMobile/SqliteMobile.ts","sqlite-hook.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PoolMangaer","database","this","exec","bind","execBatch","query","queryOne","executeScalar","count","sql","args","statements","m","fields","db","bools","p","Promise","resolve","reject","transaction","txn","executeSql","tx","results","console","log","handleResults","rows","_array","err","forEach","item","e","arr","length","l","i","undefined","push","toArray","result","r","handleResult","then","Object","keys","res","objs","obj","obj2","key","k0","mapArray","handleBool","field","value","name","b","true","App","sqliteDb","window","sqlitePlugin","openDatabase","useState","users","setUser","sqliteUser","useEffect","initTable","all","insert","user","userId","email","status","alert","catch","deleteUser","id","load","update","insertMany","map","useSqlite","inputUser","setInputUser","deleteId","setDeleteId","inputId","setInputId","handleFetch","className","src","logo","alt","onClick","style","display","placeholder","onChange","target","prev","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","renderReactDom","ReactDOM","render","document","getElementById","cordova","addEventListener"],"mappings":"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","file":"static/js/main.4d630224.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Attribute, Attributes, Manager, Statement, StringMap } from './metadata';\nimport { buildToSave, buildToSaveBatch } from './build';\n\n\nexport class PoolMangaer implements Manager  {\n  constructor(public database: any) {\n    this.exec = this.exec.bind(this);\n    this.execBatch = this.execBatch.bind(this);\n    this.query = this.query.bind(this);\n    this.queryOne = this.queryOne.bind(this);\n    this.executeScalar = this.executeScalar.bind(this);\n    this.count = this.count.bind(this);\n  }\n  exec(sql: string, args?: any[]): Promise<number> {\n    return exec(this.database, sql, args);\n  }\n  execBatch(statements: Statement[]): Promise<number> {\n  return execBatch(this.database, statements);\n  }\n  query<T>(sql: string, args?: any[], m?: StringMap, fields?: Attribute[]): Promise<T[]> {\n      return query(this.database, sql, args, m, fields);\n  }\n  queryOne<T>(sql: string, args?: any[], m?: StringMap, fields?: Attribute[]): Promise<T> {\n      return queryOne(this.database, sql, args, m, fields);\n  }\n  executeScalar<T>(sql: string, args?: any[]): Promise<T> {\n  return executeScalar<T>(this.database, sql, args);\n  }\n  count(sql: string, args?: any[]): Promise<number> {\n  return count(this.database, sql, args);\n  }\n}\n\nexport function execute(db: any, sql: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n      return db.transaction((txn) => {\n          txn.executeSql(sql, [], () => {\n          return resolve();\n          }, (err: any) => {\n              return reject(err);\n          });\n      });\n  });\n}\nexport function execBatch(db: any, statements: Statement[]): Promise<number> {\n  return new Promise<number>((resolve, reject) => {\n    return db.transaction((txn) => {\n        statements.forEach((item) => {\n          txn.executeSql(item.query, item.args);\n        })\n    }, (e: any) => {\n      reject(e);\n    }, () => {\n      resolve(1);\n    });\n  });\n}\nexport function exec(db: any, sql: string, args?: any[]): Promise<number> {\n  const p = args ? toArray(args) : [];\n  return new Promise<number>((resolve, reject) => {\n    return db.transaction((txn) => {\n        txn.executeSql(sql, p, () => {\n        return resolve(1);\n        }, (err: any) => {\n            console.log({err});\n            return reject(0);\n        });\n    });\n  });\n}\nexport function query<T>(db: any, sql: string, args?: any[], m?: StringMap, bools?: Attribute[]): Promise<T[]> {\n  const p = args ? args : [];\n  return new Promise<T[]>((resolve, reject) => {\n    return db.transaction((txn) => {\n        txn.executeSql(sql, p, (tx, results: any) => {\n          console.log(results);\n          return resolve(handleResults<T>(results.rows._array, m, bools));\n        });\n    }, (err: any) => {\n        reject(err);\n    });\n  });\n}\nexport function queryOne<T>(db: any, sql: string, args?: any[], m?: StringMap, bools?: Attribute[]): Promise<T> {\n  const p = args ? args : [];\n  return new Promise<T>((resolve, reject) => {\n    return db.transaction((txn) => {\n        txn.executeSql(sql, p, (tx, result: any) => {\n            return resolve(handleResult<T>(result.rows._array, m, bools));\n        });\n    }, (err: any) => {\n        reject(err);\n    });\n  });\n}\nexport function executeScalar<T>(db: any, sql: string, args?: any[]): Promise<T> {\n  return queryOne<T>(db, sql, args).then(r => {\n    if (!r) {\n      return null;\n    } else {\n      const keys = Object.keys(r);\n      return r[keys[0]];\n    }\n  });\n}\nexport function count(db: any, sql: string, args?: any[]): Promise<number> {\n  return executeScalar<number>(db, sql, args);\n}\nexport function save<T>(db: any|((sql: string, args?: any[]) => Promise<number>), obj: T, table: string, attrs: Attributes, buildParam?: (i: number) => string, i?: number): Promise<number> {\n  const stm = buildToSave(obj, table, attrs, buildParam, i);\n  if (!stm) {\n    return Promise.resolve(0);\n  } else {\n    if (typeof db === 'function') {\n      return db(stm.query, stm.args);\n    } else {\n      return exec(db, stm.query, stm.args);\n    }\n  }\n}\nexport function saveBatch<T>(db: any|((statements: Statement[]) => Promise<number>), objs: T[], table: string, attrs: Attributes, buildParam?: (i: number) => string): Promise<number> {\n  const stmts = buildToSaveBatch(objs, table, attrs, buildParam);\n  if (!stmts || stmts.length === 0) {\n    return Promise.resolve(0);\n  } else {\n    if (typeof db === 'function') {\n      return db(stmts);\n    } else {\n      return execBatch(db, stmts);\n    }\n  }\n}\nexport function toArray<T>(arr: T[]): T[] {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n  const p: T[] = [];\n  const l = arr.length;\n  for (let i = 0; i < l; i++) {\n    if (arr[i] === undefined) {\n      p.push(null);\n    } else {\n      p.push(arr[i]);\n    }\n  }\n  return p;\n}\nexport function handleResult<T>(r: T, m?: StringMap, bools?: Attribute[]): T {\n  if (r == null || r === undefined || (!m && (!bools || bools.length === 0))) {\n    return r;\n  }\n  handleResults([r], m, bools);\n  return r;\n}\nexport function handleResults<T>(r: T[], m?: StringMap, bools?: Attribute[]): T[] {\n  if (m) {\n    const res = mapArray(r, m);\n    if (bools && bools.length > 0) {\n      return handleBool(res, bools);\n    } else {\n      return res;\n    }\n  } else {\n    if (bools && bools.length > 0) {\n      return handleBool(r, bools);\n    } else {\n      return r;\n    }\n  }\n}\nexport function handleBool<T>(objs: T[], bools: Attribute[]): T[] {\n  if (!bools || bools.length === 0 || !objs) {\n    return objs;\n  }\n  for (const obj of objs) {\n    for (const field of bools) {\n      const value = obj[field.name];\n      if (value != null && value !== undefined) {\n        const b = field.true;\n        if (b == null || b === undefined) {\n          // tslint:disable-next-line:triple-equals\n          obj[field.name] = ('1' == value || 'T' == value || 'Y' == value);\n        } else {\n          // tslint:disable-next-line:triple-equals\n          obj[field.name] = (value == b ? true : false);\n        }\n      }\n    }\n  }\n  return objs;\n}\nexport function map<T>(obj: T, m?: StringMap): any {\n  if (!m) {\n    return obj;\n  }\n  const mkeys = Object.keys(m);\n  if (mkeys.length === 0) {\n    return obj;\n  }\n  const obj2: any = {};\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    let k0 = m[key];\n    if (!k0) {\n      k0 = key;\n    }\n    obj2[k0] = obj[key];\n  }\n  return obj2;\n}\nexport function mapArray<T>(results: T[], m?: StringMap): T[] {\n  if (!m) {\n    return results;\n  }\n  const mkeys = Object.keys(m);\n  if (mkeys.length === 0) {\n    return results;\n  }\n  const objs = [];\n  const length = results.length;\n  for (let i = 0; i < length; i++) {\n    const obj = results[i];\n    const obj2: any = {};\n    const keys = Object.keys(obj);\n    for (const key of keys) {\n      let k0 = m[key];\n      if (!k0) {\n        k0 = key;\n      }\n      obj2[k0] = (obj as any)[key];\n    }\n    objs.push(obj2);\n  }\n  return objs;\n}\nexport function getFields(fields: string[], all?: string[]): string[] {\n  if (!fields || fields.length === 0) {\n    return undefined;\n  }\n  const ext: string[] = [];\n  if (all) {\n    for (const s of fields) {\n      if (all.includes(s)) {\n        ext.push(s);\n      }\n    }\n    if (ext.length === 0) {\n      return undefined;\n    } else {\n      return ext;\n    }\n  } else {\n    return fields;\n  }\n}\nexport function buildFields(fields: string[], all?: string[]): string {\n  const s = getFields(fields, all);\n  if (!s || s.length === 0) {\n    return '*';\n  } else {\n    return s.join(',');\n  }\n}\nexport function getMapField(name: string, mp?: StringMap): string {\n  if (!mp) {\n    return name;\n  }\n  const x = mp[name];\n  if (!x) {\n    return name;\n  }\n  if (typeof x === 'string') {\n    return x;\n  }\n  return name;\n}\nexport function isEmpty(s: string): boolean {\n  return !(s && s.length > 0);\n}","import { useEffect, useState } from \"react\";\nimport { User } from \"./models/User\";\nimport { Statement } from \"./services/SqliteMobile/metadata\";\nimport { PoolMangaer } from \"./services/SqliteMobile/SqliteMobile\";\n\nexport const useSqlite = () => {\n  // @ts-ignore: Unreachable code error\n  const database = window.sqlitePlugin.openDatabase('database.db','1.0', 'user database', 1000000);\n  const [users, setUser] = useState<User[]>([]);\n  const sqliteUser = new PoolMangaer(database);\n\n  useEffect(() => {\n      (() => {\n        // deleteTable();\n        initTable();\n      })();\n  }, []);\n\n  const initTable = () => {\n    const string = `CREATE TABLE IF NOT EXISTS users(\n      userId INTEGER PRIMARY KEY,\n      name TEXT,\n      email TEXT,\n      status BOOLEAN\n    )`;\n    sqliteUser.exec(string);\n  };\n\n  const deleteTable = () => {\n    const string = `DROP TABLE users`;\n    sqliteUser.exec(string);\n  }\n\n  const all = () => {\n    const string = 'select * from users';\n    return sqliteUser.query<User>(string).then(res => setUser(res));\n  };\n\n  const load = (id: string) => {\n    const string = 'SELECT * FROM users WHERE userId = ?';\n    const args = [id];\n    return sqliteUser.queryOne<User[]>(string, args).then(res => {\n      setUser(res);\n    });\n  };\n\n  const insert = (user: User) => {\n    const string = 'INSERT INTO users (userId, name, email, status) VALUES (?,?,?,?)';\n    const args =[user.userId, user.name, user.email, user.status];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Insert Success!');\n    }).catch(() => alert('Insert Failed!'));\n  };\n\n  const deleteUser = (id: string) => {\n    const string = 'DELETE FROM users WHERE userId = ?';\n    const args = [id];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Delete Success!');\n    }).catch(() => alert('Delete Failed!'));\n  };\n\n  const update = (user: User) => {\n    const string = 'UPDATE users SET name=? ,email=?,status=? WHERE userId=?';\n    const args = [user.name, user.email, user.status,user.userId];\n    sqliteUser.exec(string, args).then(() => {\n      alert('Update Success!');\n    }).catch(() => {\n      alert('Update Failed!');\n    });\n  }\n\n  const insertMany = (users: User[]) => {\n    const statements: Statement[] = users.map((item) => {\n      return { query: 'INSERT INTO users (userId, name, email, status) VALUES (?,?,?,?)', args: [item.userId, item.name, item.email, item.status]};\n    });\n    return sqliteUser.execBatch(statements).then(() => {\n      alert('Success!');\n    }).catch(() => alert('Rollback!'));\n  }\n\n  return {database, all, insert, users, deleteUser, load, update, insertMany};\n};","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useSqlite } from './sqlite-hook';\nimport { User } from './models/User';\n\nfunction App() {\n  const sqliteDb = useSqlite();\n  const [inputUser, setInputUser] = useState<User>({\n    userId: 0,\n    name: '',\n    email: '',\n    status: false\n  });\n  const [deleteId, setDeleteId] = useState<string>('');\n  const [inputId, setInputId] = useState<string>('');\n\n  const handleFetch = () => {\n    sqliteDb.all().then(res => console.log(res));\n  }\n\n  const handleInputUserId = (e: any) => {\n    setInputUser((prev) => ({...prev, userId: e.target.value}));\n  };\n  const handleInputName = (e: any) => {\n    setInputUser((prev) => ({...prev, name: e.target.value}));\n  };\n  const handleInputEmail = (e: any) => {\n    setInputUser((prev) => ({...prev, email: e.target.value}));\n  };\n  const handleInputStatus = (e: any) => {\n    setInputUser((prev) => ({...prev, status: e.target.value}));\n  };\n  const handleInputDelete = (e: any) => {\n    setDeleteId(e.target.value);\n  };\n  const handleInputId = (e: any) => {\n    setInputId(e.target.value);\n  };\n\n  const handleInsert = () => {\n    sqliteDb.insert(inputUser);\n    setInputUser((prev) => ({...prev,userId: 0, name: '', email: '', status: false}));\n    handleFetch();\n  }\n\n  const handleDelete = () => {\n    sqliteDb.deleteUser(deleteId);\n    setDeleteId('');\n    handleFetch();\n  }\n\n  const load = () => {\n    sqliteDb.load(inputId);\n    setInputId('');\n  }\n\n  const handleUpdate = () => {\n    sqliteDb.update(inputUser);\n    setInputUser({userId: 0, name: '', email: '', status: false});\n    handleFetch();\n  }\n\n  const inserMany = () => {\n    const users: User[] = [\n      {\n        userId: 5,\n        name: '5',\n        email: '5',\n        status: false\n      },\n      {\n        userId: 6,\n        name: '6',\n        email: '6',\n        status: false\n      },\n      {\n        userId: 7,\n        name: '7',\n        email: '7',\n        status: false\n      },\n      {\n        userId: 8,\n        name: '8',\n        email: '8',\n        status: false\n      },\n    ];\n    sqliteDb.insertMany(users);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className='list-user'>\n        {sqliteDb.users ? sqliteDb.users.map(item => (\n          <>\n            <p>User Name: {item.name}</p>\n            <p>Email: {item.email}</p>\n            <hr />\n          </>\n        )) : (\n          <p>\n            Hello World!\n          </p>\n        )}\n          </div>\n        <button onClick={handleFetch}>Fetch</button>\n        <div style={{display: 'contents'}}>\n          <input value={inputId} placeholder='Input Id' onChange={handleInputId}/>\n        </div>\n        <button onClick={load}>Load</button>\n        <div style={{display: 'contents'}}>\n          <input value={inputUser.userId} placeholder='userId' onChange={handleInputUserId}/>\n          <input value={inputUser.name} placeholder='name' onChange={handleInputName}/>\n          <input value={inputUser.email} placeholder='email' onChange={handleInputEmail}/>\n          <input value={inputUser.status ? 'true' : 'false'} placeholder='status' onChange={handleInputStatus}/>\n        </div>\n        <div style={{display: 'flex', justifyContent:'space-between'}}>\n          <button onClick={handleInsert}>Insert</button>\n          <button onClick={handleUpdate}>Update</button>\n        </div>\n        <button onClick={inserMany}>Insert Many</button>\n        <div style={{display: 'contents'}}>\n          <input value={deleteId} placeholder='Delete Id' onChange={handleInputDelete}/>\n        </div>\n        <button onClick={handleDelete}>Delete</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst renderReactDom = () => {\n  ReactDOM.render(<App />, document.getElementById('root'));\n};\n// @ts-ignore: Unreachable code error\nif (window.cordova) {\n  document.addEventListener('deviceready', () => {\n    renderReactDom();\n  }, false);\n} else {\n  renderReactDom();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}